- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- name: Install EPEL
  yum:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - epel-release
  run_once: true
  register: epel_result
  notify: yum_makecache
  tags:
    - provision

- name: Import the EPEL key
  rpm_key:
    key: "/etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}"
    state: present
  run_once: true
  ignore_errors: "{{ ansible_check_mode }}"
  tags:
    - provision

- name: Install prerequisite software
  yum:
    name: "{{ item }}"
    state: present
    update_cache: true
  with_items:
    - libselinux-python
    - htop
    - vim
    - python-pip
  run_once: true
  register: package_result
  tags:
    - provision

- name: Install pip packages
  pip:
    name: "{{ item.key }}"
    version: "{{ item.value.version }}"
  with_dict: "{{ common_pip_packages }}"
  when: common_pip_packages is defined

- name: debug package_result
  debug: msg="{{ package_result }}"
  when: package_result is defined

- name: debug fh_es_heap_size
  debug: msg="{{ fh_es_heap_size }}"
  when: fh_es_heap_size is defined

- name: debug fh_es_instance_name
  debug: msg="{{ fh_es_instance_name }}"
  when: fh_es_instance_name is defined


# vim: set filetype=ansible sts=2
